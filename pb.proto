// protoc --gogofaster_out=plugins=grpc:. *.proto
syntax = "proto3";

package pb;


// 状态
message Status {
    // Host 信息
    message Host {
        message Info {
            // hostname 名称
            string hostname = 1;

            // 启动时间
            uint64 uptime = 2;

            // boot 启动时间
            uint64 bootTime = 3;
            uint64 procs = 4;
            string os = 5;
            string platform = 6;
            string platformFamily = 7;
            string platformVersion = 8;
            string kernelVersion = 9;
            string kernelArch = 10;
            string virtualizationSystem = 11;
            string virtualizationRole = 13;
            string hostId = 14;
        }
        message Temperature {
            string sensorKey = 1;
            double temperature = 2;
            double sensorHigh = 3;
            double sensorCritical = 4;
        }
        Info info = 1;
        repeated Temperature temperatures = 2;
    }

    // load
    message Load {
        double load1 =1;
        double load5 = 2;
        double load15 = 3;
    }


    message CPU {
        message Info {
            int32    cpu = 1;
            string   vendorId = 2;
            string   family = 3;
            string   model = 4;
            int32    stepping = 5;
            string   physicalId = 6;
            string   coreId = 7;
            int32    cores = 8;
            string   modelName = 9;
            double  mhz = 10;
            int32    cacheSize = 11;
            repeated string flags = 12;
            string   microcode = 13;
        }

        message Stat {
            string  cpu = 1;
            double  user = 2;
            double  system = 3;
            double  idle = 4;
            double  nice = 5;
            double  iowait = 6;
            double  irq = 7;
            double  softirq = 8;
            double  steal = 9;
            double  guest = 10;
            double  guestNice = 11;
        }

        repeated Info infos = 1;
        repeated Stat stats = 2;
    }

    message Mem {
        message Virtual {
            uint64 total = 1;
            uint64 available = 2;
            uint64 used = 3;
            double usedPercent = 4;
            uint64 free = 5;
        }
        message Swap {
            uint64  total = 1;
            uint64  used = 2;
            uint64  free = 3;
            double usedPercent = 4;
            uint64  sin = 5;
            uint64  sout = 6;
            uint64  pgIn = 7;
            uint64  pgOut = 8;
            uint64  pgFault = 9;
        }
        Virtual virtual = 1;
        Swap swap = 2;
    }


    message Net {
        message Info {
            int32 index = 1;
            int32 mtu = 2;
            string name = 3;
            string hardwareAddr = 4;
            repeated string flags = 5;
            repeated string addrList = 6;

        }
        message Stat {
            string name = 1;
            uint64 bytesSent = 2;
            uint64 bytesRecv = 3;
            uint64 packetsSent = 4;
            uint64 packetsRecv = 5;
            uint64 errin = 6;
            uint64 errout = 7;
            uint64 dropin = 8;
            uint64 dropout = 9;
            uint64 fifoin = 10;
            uint64 fifoout = 11;
        }
        repeated Info infos = 1;
        repeated Stat stats = 2;
    }
    
    message Disk {
        message Info {
            string device = 1;
            string mountpoint = 2;
            string fstype = 3;
        }

        message Stat {
            string path = 1;
            string fstype = 2;
            uint64 total =3;
            uint64 free = 4;
            uint64 used = 5;
            double usedPercent = 6;
            uint64 inodesTotal = 7;
            uint64 inodesUsed = 8;
            uint64 inodesFree = 9;
            double inodesUsedPercent = 10;
        }

        message IO {
            uint64 readCount = 1;
            uint64 mergedReadCount = 2;
            uint64 writeCount = 3;
            uint64 mergedWriteCount = 4;
            uint64 readBytes     = 5;
            uint64 writeBytes = 6;
            uint64 readTime = 7;
            uint64 writeTime = 8;
            uint64 iopsInProgress = 9;
            uint64 ioTime = 10;
            uint64 weightedIO = 11;
            string name = 12;
            string serialNumber = 13;
            string label = 14;
        }

        
        repeated Info infos = 1;
        repeated Stat stats = 2;
        repeated IO ios = 3;
    }

    Host host = 1;
    Load load = 2;
    CPU cpu = 3;
    Mem mem = 4;
    Net net = 5;
    Disk disk = 6;
}




// 隧道 请求
message TunRequest {
    bytes data = 1;
}


// 隧道 响应
message TunResponse {
    bytes data = 1;
}


// shell 请求
message ShellRequest {
    string id = 1;
    bytes data = 2; // data 是空就是取消
}

// shell 响应
message ShellResponse {
    string id = 1;
    bytes data = 2; // data 空就表示结束
}

// status 请求
message StatusRequest {
    Status status = 1;
    
}
// status 响应
message StatusResponse {
    
}
service Handler {
    // 网络 隧道
    rpc Tun(stream TunRequest) returns (stream TunResponse) {}

    // shell 脚本 服务器控制
    rpc Shell(stream ShellRequest) returns (stream ShellResponse) {}

    // 状态 请求 主动上传
    rpc Status(stream StatusRequest) returns (stream StatusResponse) {}
}