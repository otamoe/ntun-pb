// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: route.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Route_Action int32

const (
	// 拒绝
	Route_REJECT Route_Action = 0
	// 接收
	Route_ACCEPT Route_Action = 1
)

var Route_Action_name = map[int32]string{
	0: "REJECT",
	1: "ACCEPT",
}

var Route_Action_value = map[string]int32{
	"REJECT": 0,
	"ACCEPT": 1,
}

func (x Route_Action) String() string {
	return proto.EnumName(Route_Action_name, int32(x))
}

func (Route_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{0, 0}
}

type Route_Type int32

const (
	// 全部
	Route_NONE Route_Type = 0
	// 接收
	Route_ICMP Route_Type = 1
	// 接收
	Route_UDP Route_Type = 100
	// 接收
	Route_TCP Route_Type = 101
)

var Route_Type_name = map[int32]string{
	0:   "NONE",
	1:   "ICMP",
	100: "UDP",
	101: "TCP",
}

var Route_Type_value = map[string]int32{
	"NONE": 0,
	"ICMP": 1,
	"UDP":  100,
	"TCP":  101,
}

func (x Route_Type) String() string {
	return proto.EnumName(Route_Type_name, int32(x))
}

func (Route_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{0, 1}
}

type Route struct {
	// 路由 id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 协议类型
	Type Route_Type `protobuf:"varint,2,opt,name=type,proto3,enum=pb.Route_Type" json:"type,omitempty"`
	// 来源
	SourceIP string `protobuf:"bytes,3,opt,name=sourceIP,proto3" json:"sourceIP,omitempty"`
	// 目标
	DestinationIP string `protobuf:"bytes,4,opt,name=destinationIP,proto3" json:"destinationIP,omitempty"`
	// 端口
	SourcePort      uint32 `protobuf:"varint,5,opt,name=sourcePort,proto3" json:"sourcePort,omitempty"`
	DestinationPort uint32 `protobuf:"varint,6,opt,name=destinationPort,proto3" json:"destinationPort,omitempty"`
	// 备注
	Remark string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	// 动作
	Action Route_Action `protobuf:"varint,10,opt,name=action,proto3,enum=pb.Route_Action" json:"action,omitempty"`
	// 状态
	State State `protobuf:"varint,20,opt,name=state,proto3,enum=pb.State" json:"state,omitempty"`
	// 优先级
	Level int32 `protobuf:"varint,21,opt,name=level,proto3" json:"level,omitempty"`
	// createdAt
	CreatedAt int64 `protobuf:"varint,30,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// updatedAt
	UpdatedAt int64 `protobuf:"varint,31,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// expiredAt
	ExpiredAt int64 `protobuf:"varint,33,opt,name=expiredAt,proto3" json:"expiredAt,omitempty"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{0}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Route.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return m.Size()
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Route) GetType() Route_Type {
	if m != nil {
		return m.Type
	}
	return Route_NONE
}

func (m *Route) GetSourceIP() string {
	if m != nil {
		return m.SourceIP
	}
	return ""
}

func (m *Route) GetDestinationIP() string {
	if m != nil {
		return m.DestinationIP
	}
	return ""
}

func (m *Route) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *Route) GetDestinationPort() uint32 {
	if m != nil {
		return m.DestinationPort
	}
	return 0
}

func (m *Route) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *Route) GetAction() Route_Action {
	if m != nil {
		return m.Action
	}
	return Route_REJECT
}

func (m *Route) GetState() State {
	if m != nil {
		return m.State
	}
	return State_AVAILABLE
}

func (m *Route) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Route) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Route) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Route) GetExpiredAt() int64 {
	if m != nil {
		return m.ExpiredAt
	}
	return 0
}

func init() {
	proto.RegisterEnum("pb.Route_Action", Route_Action_name, Route_Action_value)
	proto.RegisterEnum("pb.Route_Type", Route_Type_name, Route_Type_value)
	proto.RegisterType((*Route)(nil), "pb.Route")
}

func init() { proto.RegisterFile("route.proto", fileDescriptor_0984d49a362b6b9f) }

var fileDescriptor_0984d49a362b6b9f = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x4f, 0x6e, 0xe2, 0x30,
	0x14, 0x87, 0xe3, 0xfc, 0x03, 0x1e, 0x82, 0x89, 0x2c, 0x66, 0x64, 0xa1, 0x91, 0xc9, 0x44, 0xb3,
	0xc8, 0x62, 0x94, 0xc5, 0xcc, 0x09, 0x98, 0x34, 0x0b, 0x2a, 0x95, 0x46, 0x6e, 0x7a, 0x80, 0x40,
	0xbc, 0x88, 0x4a, 0x49, 0x64, 0x4c, 0x55, 0x6e, 0xd1, 0x63, 0x75, 0xc9, 0xb2, 0xcb, 0x0a, 0x76,
	0x3d, 0x45, 0x65, 0x87, 0x02, 0xed, 0xee, 0xbd, 0xef, 0xf7, 0x3d, 0x25, 0xcf, 0x36, 0x74, 0x45,
	0xb5, 0x96, 0x3c, 0xaa, 0x45, 0x25, 0x2b, 0x6c, 0xd6, 0xb3, 0x61, 0x77, 0x25, 0xf3, 0x0f, 0x10,
	0xbc, 0x59, 0xe0, 0x30, 0x25, 0xe0, 0x3e, 0x98, 0x65, 0x41, 0x90, 0x8f, 0xc2, 0x0e, 0x33, 0xcb,
	0x02, 0x07, 0x60, 0xcb, 0x4d, 0xcd, 0x89, 0xe9, 0xa3, 0xb0, 0xff, 0xb7, 0x1f, 0xd5, 0xb3, 0x48,
	0x8b, 0x51, 0xb6, 0xa9, 0x39, 0xd3, 0x19, 0x1e, 0x42, 0x7b, 0x55, 0xad, 0xc5, 0x9c, 0x4f, 0x52,
	0x62, 0xe9, 0xc9, 0x63, 0x8f, 0x7f, 0x43, 0xaf, 0xe0, 0x2b, 0x59, 0x2e, 0x73, 0x59, 0x56, 0xcb,
	0x49, 0x4a, 0x6c, 0x2d, 0x7c, 0x86, 0x98, 0x02, 0x34, 0x13, 0x69, 0x25, 0x24, 0x71, 0x7c, 0x14,
	0xf6, 0xd8, 0x19, 0xc1, 0x21, 0x7c, 0x3b, 0x1b, 0xd0, 0x92, 0xab, 0xa5, 0xaf, 0x18, 0xff, 0x00,
	0x57, 0xf0, 0xfb, 0x5c, 0xdc, 0x91, 0x96, 0xfe, 0xd0, 0xa1, 0xc3, 0x21, 0xb8, 0xf9, 0x5c, 0x59,
	0x04, 0xf4, 0x26, 0xde, 0x69, 0x93, 0xb1, 0xe6, 0xec, 0x90, 0xe3, 0x11, 0x38, 0xfa, 0x68, 0xc8,
	0x40, 0x8b, 0x1d, 0x25, 0xde, 0x28, 0xc0, 0x1a, 0x8e, 0x07, 0xe0, 0x2c, 0xf8, 0x03, 0x5f, 0x90,
	0xef, 0x3e, 0x0a, 0x1d, 0xd6, 0x34, 0xf8, 0x27, 0x74, 0xe6, 0x82, 0xe7, 0x92, 0x17, 0x63, 0x49,
	0xa8, 0x8f, 0x42, 0x8b, 0x9d, 0x80, 0x4a, 0xd7, 0x75, 0x71, 0x48, 0x47, 0x4d, 0x7a, 0x04, 0x2a,
	0xe5, 0x8f, 0x75, 0x29, 0x74, 0xfa, 0xab, 0x49, 0x8f, 0x20, 0xf0, 0xc1, 0x6d, 0x7e, 0x11, 0x03,
	0xb8, 0x2c, 0xb9, 0x4c, 0xe2, 0xcc, 0x33, 0x54, 0x3d, 0x8e, 0xe3, 0x24, 0xcd, 0x3c, 0x14, 0xfc,
	0x01, 0x5b, 0x5d, 0x07, 0x6e, 0x83, 0x3d, 0xbd, 0x9e, 0x26, 0x9e, 0xa1, 0xaa, 0x49, 0x7c, 0x95,
	0x7a, 0x08, 0xb7, 0xc0, 0xba, 0xbd, 0x48, 0xbd, 0x42, 0x15, 0x59, 0x9c, 0x7a, 0xfc, 0x3f, 0x79,
	0xde, 0x51, 0xb4, 0xdd, 0x51, 0xf4, 0xba, 0xa3, 0xe8, 0x69, 0x4f, 0x8d, 0xed, 0x9e, 0x1a, 0x2f,
	0x7b, 0x6a, 0xcc, 0x5c, 0xfd, 0x1a, 0xfe, 0xbd, 0x07, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xba, 0x1e,
	0xca, 0x2d, 0x02, 0x00, 0x00,
}

func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiredAt != 0 {
		i = encodeVarintRoute(dAtA, i, uint64(m.ExpiredAt))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintRoute(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.CreatedAt != 0 {
		i = encodeVarintRoute(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.Level != 0 {
		i = encodeVarintRoute(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.State != 0 {
		i = encodeVarintRoute(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Action != 0 {
		i = encodeVarintRoute(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintRoute(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DestinationPort != 0 {
		i = encodeVarintRoute(dAtA, i, uint64(m.DestinationPort))
		i--
		dAtA[i] = 0x30
	}
	if m.SourcePort != 0 {
		i = encodeVarintRoute(dAtA, i, uint64(m.SourcePort))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DestinationIP) > 0 {
		i -= len(m.DestinationIP)
		copy(dAtA[i:], m.DestinationIP)
		i = encodeVarintRoute(dAtA, i, uint64(len(m.DestinationIP)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SourceIP) > 0 {
		i -= len(m.SourceIP)
		copy(dAtA[i:], m.SourceIP)
		i = encodeVarintRoute(dAtA, i, uint64(len(m.SourceIP)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintRoute(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRoute(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRoute(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Route) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRoute(uint64(m.Type))
	}
	l = len(m.SourceIP)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	l = len(m.DestinationIP)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	if m.SourcePort != 0 {
		n += 1 + sovRoute(uint64(m.SourcePort))
	}
	if m.DestinationPort != 0 {
		n += 1 + sovRoute(uint64(m.DestinationPort))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovRoute(uint64(m.Action))
	}
	if m.State != 0 {
		n += 2 + sovRoute(uint64(m.State))
	}
	if m.Level != 0 {
		n += 2 + sovRoute(uint64(m.Level))
	}
	if m.CreatedAt != 0 {
		n += 2 + sovRoute(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovRoute(uint64(m.UpdatedAt))
	}
	if m.ExpiredAt != 0 {
		n += 2 + sovRoute(uint64(m.ExpiredAt))
	}
	return n
}

func sovRoute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoute(x uint64) (n int) {
	return sovRoute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Route_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePort", wireType)
			}
			m.SourcePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourcePort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPort", wireType)
			}
			m.DestinationPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Route_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredAt", wireType)
			}
			m.ExpiredAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoute
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoute
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoute
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoute        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoute          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoute = fmt.Errorf("proto: unexpected end of group")
)
